{"ast":null,"code":"import React,{useEffect,useState}from'react';import{useNavigate}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';import Navbar from'../components/Navbar';import{fetchAllPatients,fetchNotesByPatientId,createNote}from'../services/api';import'./css/NotePage.css';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const NotePage=()=>{const{user,isPatient,isStaff}=useAuth();const navigate=useNavigate();const[patients,setPatients]=useState([]);const[error,setError]=useState(null);const[notes,setNotes]=useState([]);const[expandedPatientId,setExpandedPatientId]=useState(null);const[noteText,setNoteText]=useState('');useEffect(()=>{if(!user){navigate('/login');return;}if(isPatient){const loadPatientNotes=async()=>{try{const patientNotes=await fetchNotesByPatientId(user.id);setNotes(patientNotes);}catch(err){console.error('Error fetching patient notes:',err);setError('Kunde inte hämta anteckningar. Försök igen senare.');}};loadPatientNotes();}else if(isStaff){const loadAllPatients=async()=>{try{const response=await fetchAllPatients();setPatients(response);}catch(err){console.error('Error fetching patients:',err);setError('Kunde inte hämta patienter. Försök igen senare.');}};loadAllPatients();}},[user,isPatient,isStaff,navigate]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsx(\"h2\",{children:\"Anteckningar\"}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:error}),isPatient&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Anteckningar om mig.\"}),notes.length===0?/*#__PURE__*/_jsx(\"p\",{children:\"Du verkar vara fri fr\\xE5n anteckningar.\"}):notes.map(note=>/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{children:note.text})},note.id))]}),isStaff&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Patienter\"}),patients.length===0?/*#__PURE__*/_jsx(\"p\",{children:\"Inga patienter tillg\\xE4ngliga.\"}):/*#__PURE__*/_jsx(\"ul\",{className:\"patient-list\",children:patients.map(patient=>/*#__PURE__*/_jsxs(\"li\",{className:\"patient-item\",children:[/*#__PURE__*/_jsx(\"div\",{onClick:async()=>{if(expandedPatientId===patient.id){setExpandedPatientId(null);setNotes([]);return;}setExpandedPatientId(patient.id);try{const fetchedNotes=await fetchNotesByPatientId(patient.id);setNotes(fetchedNotes);}catch(err){console.error('Error fetching notes for patient:',err);setError('Kunde inte hämta anteckningar.');}},children:patient.fullName}),expandedPatientId===patient.id&&/*#__PURE__*/_jsxs(\"div\",{className:\"notes-container\",children:[notes.length===0?/*#__PURE__*/_jsx(\"p\",{children:\"Inga anteckningar f\\xF6r denna patient.\"}):notes.map(note=>/*#__PURE__*/_jsx(\"div\",{className:\"note-item\",children:/*#__PURE__*/_jsx(\"p\",{children:note.text})},note.id)),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"textarea\",{value:noteText,onChange:e=>setNoteText(e.target.value),placeholder:\"Skriv en ny anteckning...\"}),/*#__PURE__*/_jsx(\"button\",{onClick:async()=>{try{const noteRequest={// @ts-ignore\nstaffId:user.id,patientId:patient.id,text:noteText};var result=await createNote(noteRequest);setNoteText('');// töm fältet\n// Hämta uppdaterad lista direkt\nconst updatedNotes=await fetchNotesByPatientId(patient.id);setNotes(updatedNotes);}catch(err){console.error('Error creating note:',err);setError('Kunde inte skapa anteckning.');}},children:\"Spara anteckning\"})]})]})]},patient.id))})]})]});};export default NotePage;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useAuth","Navbar","fetchAllPatients","fetchNotesByPatientId","createNote","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","NotePage","user","isPatient","isStaff","navigate","patients","setPatients","error","setError","notes","setNotes","expandedPatientId","setExpandedPatientId","noteText","setNoteText","loadPatientNotes","patientNotes","id","err","console","loadAllPatients","response","children","className","length","map","note","text","patient","onClick","fetchedNotes","fullName","value","onChange","e","target","placeholder","noteRequest","staffId","patientId","result","updatedNotes"],"sources":["/Users/sonos/Developer/CM1007LABB2/frontend/src/pages/NotePage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport Navbar from '../components/Navbar';\nimport { CreateNoteRequest } from '../types/requests';\nimport { fetchAllPatients, fetchNotesByPatientId, fetchNotesByStaffId, createNote } from '../services/api';\nimport { UserResponse, NoteResponse } from '../types/responses';\nimport './css/NotePage.css';\n\nconst NotePage: React.FC = () => {\n  const { user, isPatient, isStaff } = useAuth();\n  const navigate = useNavigate();\n  const [patients, setPatients] = useState<UserResponse[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [notes, setNotes] = useState<NoteResponse[]>([]);\n  const [expandedPatientId, setExpandedPatientId] = useState<number | null>(null);\n  const [noteText, setNoteText] = useState<string>('');\n  \n\n  useEffect(() => {\n    if (!user) {\n      navigate('/login');\n      return;\n    }\n  \n    if (isPatient) {\n      const loadPatientNotes = async () => {\n        try {\n          const patientNotes = await fetchNotesByPatientId(user.id);\n          setNotes(patientNotes);\n        } catch (err) {\n          console.error('Error fetching patient notes:', err);\n          setError('Kunde inte hämta anteckningar. Försök igen senare.');\n        }\n      };\n  \n      loadPatientNotes();\n    } else if (isStaff) {\n      const loadAllPatients = async () => {\n        try {\n          const response = await fetchAllPatients();\n          setPatients(response);\n        } catch (err) {\n          console.error('Error fetching patients:', err);\n          setError('Kunde inte hämta patienter. Försök igen senare.');\n        }\n      };\n  \n      loadAllPatients();\n    }\n  }, [user, isPatient, isStaff, navigate]);\n\n  return (\n    <div>\n      <Navbar />\n      <h2>Anteckningar</h2>\n      {error && <p className=\"error-message\">{error}</p>}\n  \n      {isPatient && (\n        <>\n          <h3>Anteckningar om mig.</h3>\n          {notes.length === 0 ? (\n            <p>Du verkar vara fri från anteckningar.</p>\n          ) : (\n            notes.map((note) => (\n              <div key={note.id}>\n                <p>{note.text}</p>\n              </div>\n            ))\n          )}\n        </>\n      )}\n  \n      {isStaff && (\n        <>\n          <h3>Patienter</h3>\n          {patients.length === 0 ? (\n            <p>Inga patienter tillgängliga.</p>\n          ) : (\n            <ul className=\"patient-list\">\n              {patients.map((patient) => (\n                <li key={patient.id} className=\"patient-item\">\n                  <div\n                    onClick={async () => {\n                      if (expandedPatientId === patient.id) {\n                        setExpandedPatientId(null);\n                          setNotes([]);\n                          return;\n                      }\n                      setExpandedPatientId(patient.id);\n                      try {\n                        const fetchedNotes = await fetchNotesByPatientId(patient.id);\n                        setNotes(fetchedNotes);\n                      } catch (err) {\n                        console.error('Error fetching notes for patient:', err);\n                        setError('Kunde inte hämta anteckningar.');\n                      }\n                    }}\n                  >\n                  {patient.fullName}\n                  </div>\n                {expandedPatientId === patient.id && (\n                  <div className=\"notes-container\">\n                    {notes.length === 0 ? (\n                      <p>Inga anteckningar för denna patient.</p>\n                    ) : (\n                      notes.map((note) => (\n                        <div key={note.id} className=\"note-item\">\n                          <p>{note.text}</p>\n                        </div>\n                      ))\n                    )}\n\n                    {/* Exempel: skapa ny anteckning för patient */}\n                    <div>\n                      <textarea\n                        value={noteText}\n                        onChange={(e) => setNoteText(e.target.value)}\n                        placeholder=\"Skriv en ny anteckning...\"\n                      />\n                      <button\n                        onClick={async () => {\n                          try {\n                            const noteRequest: CreateNoteRequest = {\n                              // @ts-ignore\n                              staffId: user.id,\n                              patientId: patient.id,\n                              text: noteText\n                            };\n                            var result = await createNote(noteRequest);\n                            setNoteText(''); // töm fältet\n                            // Hämta uppdaterad lista direkt\n                            const updatedNotes = await fetchNotesByPatientId(patient.id);\n                            setNotes(updatedNotes);\n                          } catch (err) {\n                            console.error('Error creating note:', err);\n                            setError('Kunde inte skapa anteckning.');\n                          }\n                        }}\n                      >\n                        Spara anteckning\n                      </button>\n                    </div>\n                  </div>\n                )}\n                </li>\n              ))}\n            </ul>\n          )}\n  \n          {/* Exempel: staff kan också visa de anteckningar h*n själv skapat */}\n          {/* Du kan lägga till en knapp eller sektion här där du anropar fetchNotesByStaffId(user.id) */}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default NotePage;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,OAAO,KAAQ,yBAAyB,CACjD,MAAO,CAAAC,MAAM,KAAM,sBAAsB,CAEzC,OAASC,gBAAgB,CAAEC,qBAAqB,CAAuBC,UAAU,KAAQ,iBAAiB,CAE1G,MAAO,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE5B,KAAM,CAAAC,QAAkB,CAAGA,CAAA,GAAM,CAC/B,KAAM,CAAEC,IAAI,CAAEC,SAAS,CAAEC,OAAQ,CAAC,CAAGd,OAAO,CAAC,CAAC,CAC9C,KAAM,CAAAe,QAAQ,CAAGhB,WAAW,CAAC,CAAC,CAC9B,KAAM,CAACiB,QAAQ,CAAEC,WAAW,CAAC,CAAGnB,QAAQ,CAAiB,EAAE,CAAC,CAC5D,KAAM,CAACoB,KAAK,CAAEC,QAAQ,CAAC,CAAGrB,QAAQ,CAAgB,IAAI,CAAC,CACvD,KAAM,CAACsB,KAAK,CAAEC,QAAQ,CAAC,CAAGvB,QAAQ,CAAiB,EAAE,CAAC,CACtD,KAAM,CAACwB,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGzB,QAAQ,CAAgB,IAAI,CAAC,CAC/E,KAAM,CAAC0B,QAAQ,CAAEC,WAAW,CAAC,CAAG3B,QAAQ,CAAS,EAAE,CAAC,CAGpDD,SAAS,CAAC,IAAM,CACd,GAAI,CAACe,IAAI,CAAE,CACTG,QAAQ,CAAC,QAAQ,CAAC,CAClB,OACF,CAEA,GAAIF,SAAS,CAAE,CACb,KAAM,CAAAa,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CACF,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAxB,qBAAqB,CAACS,IAAI,CAACgB,EAAE,CAAC,CACzDP,QAAQ,CAACM,YAAY,CAAC,CACxB,CAAE,MAAOE,GAAG,CAAE,CACZC,OAAO,CAACZ,KAAK,CAAC,+BAA+B,CAAEW,GAAG,CAAC,CACnDV,QAAQ,CAAC,oDAAoD,CAAC,CAChE,CACF,CAAC,CAEDO,gBAAgB,CAAC,CAAC,CACpB,CAAC,IAAM,IAAIZ,OAAO,CAAE,CAClB,KAAM,CAAAiB,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAA9B,gBAAgB,CAAC,CAAC,CACzCe,WAAW,CAACe,QAAQ,CAAC,CACvB,CAAE,MAAOH,GAAG,CAAE,CACZC,OAAO,CAACZ,KAAK,CAAC,0BAA0B,CAAEW,GAAG,CAAC,CAC9CV,QAAQ,CAAC,iDAAiD,CAAC,CAC7D,CACF,CAAC,CAEDY,eAAe,CAAC,CAAC,CACnB,CACF,CAAC,CAAE,CAACnB,IAAI,CAAEC,SAAS,CAAEC,OAAO,CAAEC,QAAQ,CAAC,CAAC,CAExC,mBACEL,KAAA,QAAAuB,QAAA,eACE3B,IAAA,CAACL,MAAM,GAAE,CAAC,cACVK,IAAA,OAAA2B,QAAA,CAAI,cAAY,CAAI,CAAC,CACpBf,KAAK,eAAIZ,IAAA,MAAG4B,SAAS,CAAC,eAAe,CAAAD,QAAA,CAAEf,KAAK,CAAI,CAAC,CAEjDL,SAAS,eACRH,KAAA,CAAAF,SAAA,EAAAyB,QAAA,eACE3B,IAAA,OAAA2B,QAAA,CAAI,sBAAoB,CAAI,CAAC,CAC5Bb,KAAK,CAACe,MAAM,GAAK,CAAC,cACjB7B,IAAA,MAAA2B,QAAA,CAAG,0CAAqC,CAAG,CAAC,CAE5Cb,KAAK,CAACgB,GAAG,CAAEC,IAAI,eACb/B,IAAA,QAAA2B,QAAA,cACE3B,IAAA,MAAA2B,QAAA,CAAII,IAAI,CAACC,IAAI,CAAI,CAAC,EADVD,IAAI,CAACT,EAEV,CACN,CACF,EACD,CACH,CAEAd,OAAO,eACNJ,KAAA,CAAAF,SAAA,EAAAyB,QAAA,eACE3B,IAAA,OAAA2B,QAAA,CAAI,WAAS,CAAI,CAAC,CACjBjB,QAAQ,CAACmB,MAAM,GAAK,CAAC,cACpB7B,IAAA,MAAA2B,QAAA,CAAG,iCAA4B,CAAG,CAAC,cAEnC3B,IAAA,OAAI4B,SAAS,CAAC,cAAc,CAAAD,QAAA,CACzBjB,QAAQ,CAACoB,GAAG,CAAEG,OAAO,eACpB7B,KAAA,OAAqBwB,SAAS,CAAC,cAAc,CAAAD,QAAA,eAC3C3B,IAAA,QACEkC,OAAO,CAAE,KAAAA,CAAA,GAAY,CACnB,GAAIlB,iBAAiB,GAAKiB,OAAO,CAACX,EAAE,CAAE,CACpCL,oBAAoB,CAAC,IAAI,CAAC,CACxBF,QAAQ,CAAC,EAAE,CAAC,CACZ,OACJ,CACAE,oBAAoB,CAACgB,OAAO,CAACX,EAAE,CAAC,CAChC,GAAI,CACF,KAAM,CAAAa,YAAY,CAAG,KAAM,CAAAtC,qBAAqB,CAACoC,OAAO,CAACX,EAAE,CAAC,CAC5DP,QAAQ,CAACoB,YAAY,CAAC,CACxB,CAAE,MAAOZ,GAAG,CAAE,CACZC,OAAO,CAACZ,KAAK,CAAC,mCAAmC,CAAEW,GAAG,CAAC,CACvDV,QAAQ,CAAC,gCAAgC,CAAC,CAC5C,CACF,CAAE,CAAAc,QAAA,CAEHM,OAAO,CAACG,QAAQ,CACZ,CAAC,CACPpB,iBAAiB,GAAKiB,OAAO,CAACX,EAAE,eAC/BlB,KAAA,QAAKwB,SAAS,CAAC,iBAAiB,CAAAD,QAAA,EAC7Bb,KAAK,CAACe,MAAM,GAAK,CAAC,cACjB7B,IAAA,MAAA2B,QAAA,CAAG,yCAAoC,CAAG,CAAC,CAE3Cb,KAAK,CAACgB,GAAG,CAAEC,IAAI,eACb/B,IAAA,QAAmB4B,SAAS,CAAC,WAAW,CAAAD,QAAA,cACtC3B,IAAA,MAAA2B,QAAA,CAAII,IAAI,CAACC,IAAI,CAAI,CAAC,EADVD,IAAI,CAACT,EAEV,CACN,CACF,cAGDlB,KAAA,QAAAuB,QAAA,eACE3B,IAAA,aACEqC,KAAK,CAAEnB,QAAS,CAChBoB,QAAQ,CAAGC,CAAC,EAAKpB,WAAW,CAACoB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC7CI,WAAW,CAAC,2BAA2B,CACxC,CAAC,cACFzC,IAAA,WACEkC,OAAO,CAAE,KAAAA,CAAA,GAAY,CACnB,GAAI,CACF,KAAM,CAAAQ,WAA8B,CAAG,CACrC;AACAC,OAAO,CAAErC,IAAI,CAACgB,EAAE,CAChBsB,SAAS,CAAEX,OAAO,CAACX,EAAE,CACrBU,IAAI,CAAEd,QACR,CAAC,CACD,GAAI,CAAA2B,MAAM,CAAG,KAAM,CAAA/C,UAAU,CAAC4C,WAAW,CAAC,CAC1CvB,WAAW,CAAC,EAAE,CAAC,CAAE;AACjB;AACA,KAAM,CAAA2B,YAAY,CAAG,KAAM,CAAAjD,qBAAqB,CAACoC,OAAO,CAACX,EAAE,CAAC,CAC5DP,QAAQ,CAAC+B,YAAY,CAAC,CACxB,CAAE,MAAOvB,GAAG,CAAE,CACZC,OAAO,CAACZ,KAAK,CAAC,sBAAsB,CAAEW,GAAG,CAAC,CAC1CV,QAAQ,CAAC,8BAA8B,CAAC,CAC1C,CACF,CAAE,CAAAc,QAAA,CACH,kBAED,CAAQ,CAAC,EACN,CAAC,EACH,CACN,GA/DQM,OAAO,CAACX,EAgEb,CACL,CAAC,CACA,CACL,EAID,CACH,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAjB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}